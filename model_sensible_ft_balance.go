/*
 * MetaSV API Spec
 *
 * API definition for MetaSV provided apis
 *
 * API version: 2.1.4
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metasv

import (
	"encoding/json"
)

// SensibleFtBalance Sensible fungible token balance
type SensibleFtBalance struct {
	// Codehash of the token.
	CodeHash *string `json:"codeHash,omitempty"`
	// Genesis of the token.
	Genesis *string `json:"genesis,omitempty"`
	// Name of the token.
	Name *string `json:"name,omitempty"`
	// Symbol of the token.
	Symbol *string `json:"symbol,omitempty"`
	// The decimal position.
	Decimal *int32 `json:"decimal,omitempty"`
	// SensibleId of the token
	SensibleId *string `json:"sensibleId,omitempty"`
	// Number of utxos for this token.
	UtxoCount *int32 `json:"utxoCount,omitempty"`
	// Confirmed balance of the token.
	Confirmed *int64 `json:"confirmed,omitempty"`
	// Confirmed balance of the token(In string format).
	ConfirmedString *string `json:"confirmedString,omitempty"`
	// Unconfirmed balance of the token.
	Unconfirmed *int64 `json:"unconfirmed,omitempty"`
	// Unconfirmed balance of the token(In string format).
	UnconfirmedString *string `json:"unconfirmedString,omitempty"`
}

// NewSensibleFtBalance instantiates a new SensibleFtBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensibleFtBalance() *SensibleFtBalance {
	this := SensibleFtBalance{}
	return &this
}

// NewSensibleFtBalanceWithDefaults instantiates a new SensibleFtBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensibleFtBalanceWithDefaults() *SensibleFtBalance {
	this := SensibleFtBalance{}
	return &this
}

// GetCodeHash returns the CodeHash field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetCodeHash() string {
	if o == nil || o.CodeHash == nil {
		var ret string
		return ret
	}
	return *o.CodeHash
}

// GetCodeHashOk returns a tuple with the CodeHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetCodeHashOk() (*string, bool) {
	if o == nil || o.CodeHash == nil {
		return nil, false
	}
	return o.CodeHash, true
}

// HasCodeHash returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasCodeHash() bool {
	if o != nil && o.CodeHash != nil {
		return true
	}

	return false
}

// SetCodeHash gets a reference to the given string and assigns it to the CodeHash field.
func (o *SensibleFtBalance) SetCodeHash(v string) {
	o.CodeHash = &v
}

// GetGenesis returns the Genesis field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetGenesis() string {
	if o == nil || o.Genesis == nil {
		var ret string
		return ret
	}
	return *o.Genesis
}

// GetGenesisOk returns a tuple with the Genesis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetGenesisOk() (*string, bool) {
	if o == nil || o.Genesis == nil {
		return nil, false
	}
	return o.Genesis, true
}

// HasGenesis returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasGenesis() bool {
	if o != nil && o.Genesis != nil {
		return true
	}

	return false
}

// SetGenesis gets a reference to the given string and assigns it to the Genesis field.
func (o *SensibleFtBalance) SetGenesis(v string) {
	o.Genesis = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SensibleFtBalance) SetName(v string) {
	o.Name = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *SensibleFtBalance) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDecimal returns the Decimal field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetDecimal() int32 {
	if o == nil || o.Decimal == nil {
		var ret int32
		return ret
	}
	return *o.Decimal
}

// GetDecimalOk returns a tuple with the Decimal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetDecimalOk() (*int32, bool) {
	if o == nil || o.Decimal == nil {
		return nil, false
	}
	return o.Decimal, true
}

// HasDecimal returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasDecimal() bool {
	if o != nil && o.Decimal != nil {
		return true
	}

	return false
}

// SetDecimal gets a reference to the given int32 and assigns it to the Decimal field.
func (o *SensibleFtBalance) SetDecimal(v int32) {
	o.Decimal = &v
}

// GetSensibleId returns the SensibleId field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetSensibleId() string {
	if o == nil || o.SensibleId == nil {
		var ret string
		return ret
	}
	return *o.SensibleId
}

// GetSensibleIdOk returns a tuple with the SensibleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetSensibleIdOk() (*string, bool) {
	if o == nil || o.SensibleId == nil {
		return nil, false
	}
	return o.SensibleId, true
}

// HasSensibleId returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasSensibleId() bool {
	if o != nil && o.SensibleId != nil {
		return true
	}

	return false
}

// SetSensibleId gets a reference to the given string and assigns it to the SensibleId field.
func (o *SensibleFtBalance) SetSensibleId(v string) {
	o.SensibleId = &v
}

// GetUtxoCount returns the UtxoCount field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetUtxoCount() int32 {
	if o == nil || o.UtxoCount == nil {
		var ret int32
		return ret
	}
	return *o.UtxoCount
}

// GetUtxoCountOk returns a tuple with the UtxoCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetUtxoCountOk() (*int32, bool) {
	if o == nil || o.UtxoCount == nil {
		return nil, false
	}
	return o.UtxoCount, true
}

// HasUtxoCount returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasUtxoCount() bool {
	if o != nil && o.UtxoCount != nil {
		return true
	}

	return false
}

// SetUtxoCount gets a reference to the given int32 and assigns it to the UtxoCount field.
func (o *SensibleFtBalance) SetUtxoCount(v int32) {
	o.UtxoCount = &v
}

// GetConfirmed returns the Confirmed field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetConfirmed() int64 {
	if o == nil || o.Confirmed == nil {
		var ret int64
		return ret
	}
	return *o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetConfirmedOk() (*int64, bool) {
	if o == nil || o.Confirmed == nil {
		return nil, false
	}
	return o.Confirmed, true
}

// HasConfirmed returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasConfirmed() bool {
	if o != nil && o.Confirmed != nil {
		return true
	}

	return false
}

// SetConfirmed gets a reference to the given int64 and assigns it to the Confirmed field.
func (o *SensibleFtBalance) SetConfirmed(v int64) {
	o.Confirmed = &v
}

// GetConfirmedString returns the ConfirmedString field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetConfirmedString() string {
	if o == nil || o.ConfirmedString == nil {
		var ret string
		return ret
	}
	return *o.ConfirmedString
}

// GetConfirmedStringOk returns a tuple with the ConfirmedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetConfirmedStringOk() (*string, bool) {
	if o == nil || o.ConfirmedString == nil {
		return nil, false
	}
	return o.ConfirmedString, true
}

// HasConfirmedString returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasConfirmedString() bool {
	if o != nil && o.ConfirmedString != nil {
		return true
	}

	return false
}

// SetConfirmedString gets a reference to the given string and assigns it to the ConfirmedString field.
func (o *SensibleFtBalance) SetConfirmedString(v string) {
	o.ConfirmedString = &v
}

// GetUnconfirmed returns the Unconfirmed field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetUnconfirmed() int64 {
	if o == nil || o.Unconfirmed == nil {
		var ret int64
		return ret
	}
	return *o.Unconfirmed
}

// GetUnconfirmedOk returns a tuple with the Unconfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetUnconfirmedOk() (*int64, bool) {
	if o == nil || o.Unconfirmed == nil {
		return nil, false
	}
	return o.Unconfirmed, true
}

// HasUnconfirmed returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasUnconfirmed() bool {
	if o != nil && o.Unconfirmed != nil {
		return true
	}

	return false
}

// SetUnconfirmed gets a reference to the given int64 and assigns it to the Unconfirmed field.
func (o *SensibleFtBalance) SetUnconfirmed(v int64) {
	o.Unconfirmed = &v
}

// GetUnconfirmedString returns the UnconfirmedString field value if set, zero value otherwise.
func (o *SensibleFtBalance) GetUnconfirmedString() string {
	if o == nil || o.UnconfirmedString == nil {
		var ret string
		return ret
	}
	return *o.UnconfirmedString
}

// GetUnconfirmedStringOk returns a tuple with the UnconfirmedString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SensibleFtBalance) GetUnconfirmedStringOk() (*string, bool) {
	if o == nil || o.UnconfirmedString == nil {
		return nil, false
	}
	return o.UnconfirmedString, true
}

// HasUnconfirmedString returns a boolean if a field has been set.
func (o *SensibleFtBalance) HasUnconfirmedString() bool {
	if o != nil && o.UnconfirmedString != nil {
		return true
	}

	return false
}

// SetUnconfirmedString gets a reference to the given string and assigns it to the UnconfirmedString field.
func (o *SensibleFtBalance) SetUnconfirmedString(v string) {
	o.UnconfirmedString = &v
}

func (o SensibleFtBalance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CodeHash != nil {
		toSerialize["codeHash"] = o.CodeHash
	}
	if o.Genesis != nil {
		toSerialize["genesis"] = o.Genesis
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Decimal != nil {
		toSerialize["decimal"] = o.Decimal
	}
	if o.SensibleId != nil {
		toSerialize["sensibleId"] = o.SensibleId
	}
	if o.UtxoCount != nil {
		toSerialize["utxoCount"] = o.UtxoCount
	}
	if o.Confirmed != nil {
		toSerialize["confirmed"] = o.Confirmed
	}
	if o.ConfirmedString != nil {
		toSerialize["confirmedString"] = o.ConfirmedString
	}
	if o.Unconfirmed != nil {
		toSerialize["unconfirmed"] = o.Unconfirmed
	}
	if o.UnconfirmedString != nil {
		toSerialize["unconfirmedString"] = o.UnconfirmedString
	}
	return json.Marshal(toSerialize)
}

type NullableSensibleFtBalance struct {
	value *SensibleFtBalance
	isSet bool
}

func (v NullableSensibleFtBalance) Get() *SensibleFtBalance {
	return v.value
}

func (v *NullableSensibleFtBalance) Set(val *SensibleFtBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableSensibleFtBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableSensibleFtBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensibleFtBalance(val *SensibleFtBalance) *NullableSensibleFtBalance {
	return &NullableSensibleFtBalance{value: val, isSet: true}
}

func (v NullableSensibleFtBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensibleFtBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
