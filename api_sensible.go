/*
 * MetaSV API Spec
 *
 * API definition for MetaSV provided apis
 *
 * API version: 2.1.4
 * Contact: heqiming@metasv.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metasv

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SensibleApiService SensibleApi service
type SensibleApiService service

type ApiSensibleFtAddressAddressBalanceConfirmedGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
}

func (r ApiSensibleFtAddressAddressBalanceConfirmedGetRequest) CodeHash(codeHash string) ApiSensibleFtAddressAddressBalanceConfirmedGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleFtAddressAddressBalanceConfirmedGetRequest) Genesis(genesis string) ApiSensibleFtAddressAddressBalanceConfirmedGetRequest {
	r.genesis = &genesis
	return r
}

func (r ApiSensibleFtAddressAddressBalanceConfirmedGetRequest) Execute() (int64, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleFtAddressAddressBalanceConfirmedGetExecute(r)
}

/*
 * SensibleFtAddressAddressBalanceConfirmedGet Get all sensible token balances for specific address ignoring all unconfirmed txs.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address the requested address
 * @return ApiSensibleFtAddressAddressBalanceConfirmedGetRequest
 */
func (a *SensibleApiService) SensibleFtAddressAddressBalanceConfirmedGet(ctx _context.Context, address string) ApiSensibleFtAddressAddressBalanceConfirmedGetRequest {
	return ApiSensibleFtAddressAddressBalanceConfirmedGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return int64
 */
func (a *SensibleApiService) SensibleFtAddressAddressBalanceConfirmedGetExecute(r ApiSensibleFtAddressAddressBalanceConfirmedGetRequest) (int64, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleFtAddressAddressBalanceConfirmedGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/ft/address/{address}/balance/confirmed"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.codeHash == nil {
		executionError.error = "codeHash is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.genesis == nil {
		executionError.error = "genesis is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleFtAddressAddressBalanceGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
}

func (r ApiSensibleFtAddressAddressBalanceGetRequest) CodeHash(codeHash string) ApiSensibleFtAddressAddressBalanceGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleFtAddressAddressBalanceGetRequest) Genesis(genesis string) ApiSensibleFtAddressAddressBalanceGetRequest {
	r.genesis = &genesis
	return r
}

func (r ApiSensibleFtAddressAddressBalanceGetRequest) Execute() ([]SensibleFtBalance, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleFtAddressAddressBalanceGetExecute(r)
}

/*
 * SensibleFtAddressAddressBalanceGet Get all sensible token balances for specific address.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address the requested address
 * @return ApiSensibleFtAddressAddressBalanceGetRequest
 */
func (a *SensibleApiService) SensibleFtAddressAddressBalanceGet(ctx _context.Context, address string) ApiSensibleFtAddressAddressBalanceGetRequest {
	return ApiSensibleFtAddressAddressBalanceGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return []SensibleFtBalance
 */
func (a *SensibleApiService) SensibleFtAddressAddressBalanceGetExecute(r ApiSensibleFtAddressAddressBalanceGetRequest) ([]SensibleFtBalance, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleFtBalance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleFtAddressAddressBalanceGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/ft/address/{address}/balance"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.codeHash != nil {
		localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	}
	if r.genesis != nil {
		localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleFtAddressAddressUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
	flag       *string
}

func (r ApiSensibleFtAddressAddressUtxoGetRequest) CodeHash(codeHash string) ApiSensibleFtAddressAddressUtxoGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleFtAddressAddressUtxoGetRequest) Genesis(genesis string) ApiSensibleFtAddressAddressUtxoGetRequest {
	r.genesis = &genesis
	return r
}
func (r ApiSensibleFtAddressAddressUtxoGetRequest) Flag(flag string) ApiSensibleFtAddressAddressUtxoGetRequest {
	r.flag = &flag
	return r
}

func (r ApiSensibleFtAddressAddressUtxoGetRequest) Execute() ([]SensibleFtUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleFtAddressAddressUtxoGetExecute(r)
}

/*
 * SensibleFtAddressAddressUtxoGet Get all sensible token utxos for specific address.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address the requested address
 * @return ApiSensibleFtAddressAddressUtxoGetRequest
 */
func (a *SensibleApiService) SensibleFtAddressAddressUtxoGet(ctx _context.Context, address string) ApiSensibleFtAddressAddressUtxoGetRequest {
	return ApiSensibleFtAddressAddressUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return []SensibleFtUtxo
 */
func (a *SensibleApiService) SensibleFtAddressAddressUtxoGetExecute(r ApiSensibleFtAddressAddressUtxoGetRequest) ([]SensibleFtUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleFtUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleFtAddressAddressUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/ft/address/{address}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.codeHash != nil {
		localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	}
	if r.genesis != nil {
		localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	}
	if r.flag != nil {
		localVarQueryParams.Add("flag", parameterToString(*r.flag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftAddressAddressCountConfirmedGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
}

func (r ApiSensibleNftAddressAddressCountConfirmedGetRequest) CodeHash(codeHash string) ApiSensibleNftAddressAddressCountConfirmedGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleNftAddressAddressCountConfirmedGetRequest) Genesis(genesis string) ApiSensibleNftAddressAddressCountConfirmedGetRequest {
	r.genesis = &genesis
	return r
}

func (r ApiSensibleNftAddressAddressCountConfirmedGetRequest) Execute() (int32, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftAddressAddressCountConfirmedGetExecute(r)
}

/*
 * SensibleNftAddressAddressCountConfirmedGet Get confirmed utxo count for specific nft(ignore all unconfirmed txs).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address the requested address
 * @return ApiSensibleNftAddressAddressCountConfirmedGetRequest
 */
func (a *SensibleApiService) SensibleNftAddressAddressCountConfirmedGet(ctx _context.Context, address string) ApiSensibleNftAddressAddressCountConfirmedGetRequest {
	return ApiSensibleNftAddressAddressCountConfirmedGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return int32
 */
func (a *SensibleApiService) SensibleNftAddressAddressCountConfirmedGetExecute(r ApiSensibleNftAddressAddressCountConfirmedGetRequest) (int32, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftAddressAddressCountConfirmedGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/address/{address}/count/confirmed"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.codeHash == nil {
		executionError.error = "codeHash is required and must be specified"
		return localVarReturnValue, nil, executionError
	}
	if r.genesis == nil {
		executionError.error = "genesis is required and must be specified"
		return localVarReturnValue, nil, executionError
	}

	localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftAddressAddressSummaryGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
}

func (r ApiSensibleNftAddressAddressSummaryGetRequest) Execute() ([]SensibleNftAddressSummary, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftAddressAddressSummaryGetExecute(r)
}

/*
 * SensibleNftAddressAddressSummaryGet Get nft summary(NFT count group by genesis) for address.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address the requested address
 * @return ApiSensibleNftAddressAddressSummaryGetRequest
 */
func (a *SensibleApiService) SensibleNftAddressAddressSummaryGet(ctx _context.Context, address string) ApiSensibleNftAddressAddressSummaryGetRequest {
	return ApiSensibleNftAddressAddressSummaryGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftAddressSummary
 */
func (a *SensibleApiService) SensibleNftAddressAddressSummaryGetExecute(r ApiSensibleNftAddressAddressSummaryGetRequest) ([]SensibleNftAddressSummary, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftAddressSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftAddressAddressSummaryGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/address/{address}/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftAddressAddressUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
	flag       *string
}

func (r ApiSensibleNftAddressAddressUtxoGetRequest) CodeHash(codeHash string) ApiSensibleNftAddressAddressUtxoGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleNftAddressAddressUtxoGetRequest) Genesis(genesis string) ApiSensibleNftAddressAddressUtxoGetRequest {
	r.genesis = &genesis
	return r
}
func (r ApiSensibleNftAddressAddressUtxoGetRequest) Flag(flag string) ApiSensibleNftAddressAddressUtxoGetRequest {
	r.flag = &flag
	return r
}

func (r ApiSensibleNftAddressAddressUtxoGetRequest) Execute() ([]SensibleNftUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftAddressAddressUtxoGetExecute(r)
}

/*
 * SensibleNftAddressAddressUtxoGet Get all sensible nft token utxos for specific address.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address the requested address
 * @return ApiSensibleNftAddressAddressUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftAddressAddressUtxoGet(ctx _context.Context, address string) ApiSensibleNftAddressAddressUtxoGetRequest {
	return ApiSensibleNftAddressAddressUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftUtxo
 */
func (a *SensibleApiService) SensibleNftAddressAddressUtxoGetExecute(r ApiSensibleNftAddressAddressUtxoGetRequest) ([]SensibleNftUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftAddressAddressUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/address/{address}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.codeHash != nil {
		localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	}
	if r.genesis != nil {
		localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	}
	if r.flag != nil {
		localVarQueryParams.Add("flag", parameterToString(*r.flag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	codeHash   string
	nftId      string
}

func (r ApiSensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetRequest) Execute() ([]SensibleNftAuctionUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetExecute(r)
}

/*
 * SensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet Get all sensible nft token utxos by codeHash and genesisId.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param codeHash Code hash of the token.
 * @param nftId Nft id of this auction.
 * @return ApiSensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet(ctx _context.Context, codeHash string, nftId string) ApiSensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetRequest {
	return ApiSensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		codeHash:   codeHash,
		nftId:      nftId,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftAuctionUtxo
 */
func (a *SensibleApiService) SensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetExecute(r ApiSensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGetRequest) ([]SensibleNftAuctionUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftAuctionUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftAuctionCodeHashCodeHashNftIdNftIdUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/auction/codeHash/{codeHash}/nftId/{nftId}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"codeHash"+"}", _neturl.PathEscape(parameterToString(r.codeHash, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"nftId"+"}", _neturl.PathEscape(parameterToString(r.nftId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftGenesisCodeHashGenesisSummaryGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	codeHash   string
	genesis    string
}

func (r ApiSensibleNftGenesisCodeHashGenesisSummaryGetRequest) Execute() ([]SensibleNftGenesisSummary, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftGenesisCodeHashGenesisSummaryGetExecute(r)
}

/*
 * SensibleNftGenesisCodeHashGenesisSummaryGet Get nft summary(count group by address) for specific codeHash and genesisId(result cached for 60s).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param codeHash Code hash of the token.
 * @param genesis Contract genesis
 * @return ApiSensibleNftGenesisCodeHashGenesisSummaryGetRequest
 */
func (a *SensibleApiService) SensibleNftGenesisCodeHashGenesisSummaryGet(ctx _context.Context, codeHash string, genesis string) ApiSensibleNftGenesisCodeHashGenesisSummaryGetRequest {
	return ApiSensibleNftGenesisCodeHashGenesisSummaryGetRequest{
		ApiService: a,
		ctx:        ctx,
		codeHash:   codeHash,
		genesis:    genesis,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftGenesisSummary
 */
func (a *SensibleApiService) SensibleNftGenesisCodeHashGenesisSummaryGetExecute(r ApiSensibleNftGenesisCodeHashGenesisSummaryGetRequest) ([]SensibleNftGenesisSummary, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftGenesisSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftGenesisCodeHashGenesisSummaryGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/genesis/{codeHash}/{genesis}/summary"
	localVarPath = strings.Replace(localVarPath, "{"+"codeHash"+"}", _neturl.PathEscape(parameterToString(r.codeHash, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"genesis"+"}", _neturl.PathEscape(parameterToString(r.genesis, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	codeHash   string
	genesis    string
	tokenIndex *int64
	max        *int64
	min        *int64
}

func (r ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest) TokenIndex(tokenIndex int64) ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest {
	r.tokenIndex = &tokenIndex
	return r
}
func (r ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest) Max(max int64) ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest {
	r.max = &max
	return r
}
func (r ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest) Min(min int64) ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest {
	r.min = &min
	return r
}

func (r ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest) Execute() ([]SensibleNftUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftGenesisCodeHashGenesisUtxoGetExecute(r)
}

/*
 * SensibleNftGenesisCodeHashGenesisUtxoGet Get all sensible nft token utxos by codeHash and genesisId.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param codeHash Code hash of the token.
 * @param genesis Contract genesis
 * @return ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftGenesisCodeHashGenesisUtxoGet(ctx _context.Context, codeHash string, genesis string) ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest {
	return ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		codeHash:   codeHash,
		genesis:    genesis,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftUtxo
 */
func (a *SensibleApiService) SensibleNftGenesisCodeHashGenesisUtxoGetExecute(r ApiSensibleNftGenesisCodeHashGenesisUtxoGetRequest) ([]SensibleNftUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftGenesisCodeHashGenesisUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/genesis/{codeHash}/{genesis}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"codeHash"+"}", _neturl.PathEscape(parameterToString(r.codeHash, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"genesis"+"}", _neturl.PathEscape(parameterToString(r.genesis, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tokenIndex != nil {
		localVarQueryParams.Add("tokenIndex", parameterToString(*r.tokenIndex, ""))
	}
	if r.max != nil {
		localVarQueryParams.Add("max", parameterToString(*r.max, ""))
	}
	if r.min != nil {
		localVarQueryParams.Add("min", parameterToString(*r.min, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftSellAddressAddressUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
	flag       *string
}

func (r ApiSensibleNftSellAddressAddressUtxoGetRequest) CodeHash(codeHash string) ApiSensibleNftSellAddressAddressUtxoGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleNftSellAddressAddressUtxoGetRequest) Genesis(genesis string) ApiSensibleNftSellAddressAddressUtxoGetRequest {
	r.genesis = &genesis
	return r
}
func (r ApiSensibleNftSellAddressAddressUtxoGetRequest) Flag(flag string) ApiSensibleNftSellAddressAddressUtxoGetRequest {
	r.flag = &flag
	return r
}

func (r ApiSensibleNftSellAddressAddressUtxoGetRequest) Execute() ([]SensibleNftSellUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftSellAddressAddressUtxoGetExecute(r)
}

/*
 * SensibleNftSellAddressAddressUtxoGet Get all sensible sell sell utxos for specific address.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address Owner address.
 * @return ApiSensibleNftSellAddressAddressUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftSellAddressAddressUtxoGet(ctx _context.Context, address string) ApiSensibleNftSellAddressAddressUtxoGetRequest {
	return ApiSensibleNftSellAddressAddressUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftSellUtxo
 */
func (a *SensibleApiService) SensibleNftSellAddressAddressUtxoGetExecute(r ApiSensibleNftSellAddressAddressUtxoGetRequest) ([]SensibleNftSellUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftSellUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftSellAddressAddressUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/sell/address/{address}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.codeHash != nil {
		localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	}
	if r.genesis != nil {
		localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	}
	if r.flag != nil {
		localVarQueryParams.Add("flag", parameterToString(*r.flag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	codeHash   string
	genesis    string
	tokenIndex *int64
	max        *int64
	min        *int64
}

func (r ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest) TokenIndex(tokenIndex int64) ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest {
	r.tokenIndex = &tokenIndex
	return r
}
func (r ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest) Max(max int64) ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest {
	r.max = &max
	return r
}
func (r ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest) Min(min int64) ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest {
	r.min = &min
	return r
}

func (r ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest) Execute() ([]SensibleNftSellUtxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftSellGenesisCodeHashGenesisUtxoGetExecute(r)
}

/*
 * SensibleNftSellGenesisCodeHashGenesisUtxoGet Get all sensible nft token utxos by codeHash and genesisId.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param codeHash Code hash of the token.
 * @param genesis Contract genesis
 * @return ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftSellGenesisCodeHashGenesisUtxoGet(ctx _context.Context, codeHash string, genesis string) ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest {
	return ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		codeHash:   codeHash,
		genesis:    genesis,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftSellUtxo
 */
func (a *SensibleApiService) SensibleNftSellGenesisCodeHashGenesisUtxoGetExecute(r ApiSensibleNftSellGenesisCodeHashGenesisUtxoGetRequest) ([]SensibleNftSellUtxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftSellUtxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftSellGenesisCodeHashGenesisUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/sell/genesis/{codeHash}/{genesis}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"codeHash"+"}", _neturl.PathEscape(parameterToString(r.codeHash, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"genesis"+"}", _neturl.PathEscape(parameterToString(r.genesis, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tokenIndex != nil {
		localVarQueryParams.Add("tokenIndex", parameterToString(*r.tokenIndex, ""))
	}
	if r.max != nil {
		localVarQueryParams.Add("max", parameterToString(*r.max, ""))
	}
	if r.min != nil {
		localVarQueryParams.Add("min", parameterToString(*r.min, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftSellV2AddressAddressUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	address    string
	codeHash   *string
	genesis    *string
	flag       *string
}

func (r ApiSensibleNftSellV2AddressAddressUtxoGetRequest) CodeHash(codeHash string) ApiSensibleNftSellV2AddressAddressUtxoGetRequest {
	r.codeHash = &codeHash
	return r
}
func (r ApiSensibleNftSellV2AddressAddressUtxoGetRequest) Genesis(genesis string) ApiSensibleNftSellV2AddressAddressUtxoGetRequest {
	r.genesis = &genesis
	return r
}
func (r ApiSensibleNftSellV2AddressAddressUtxoGetRequest) Flag(flag string) ApiSensibleNftSellV2AddressAddressUtxoGetRequest {
	r.flag = &flag
	return r
}

func (r ApiSensibleNftSellV2AddressAddressUtxoGetRequest) Execute() ([]SensibleNftSellV2Utxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftSellV2AddressAddressUtxoGetExecute(r)
}

/*
 * SensibleNftSellV2AddressAddressUtxoGet Get all sensible sell sell utxos for specific address.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param address Owner address.
 * @return ApiSensibleNftSellV2AddressAddressUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftSellV2AddressAddressUtxoGet(ctx _context.Context, address string) ApiSensibleNftSellV2AddressAddressUtxoGetRequest {
	return ApiSensibleNftSellV2AddressAddressUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		address:    address,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftSellV2Utxo
 */
func (a *SensibleApiService) SensibleNftSellV2AddressAddressUtxoGetExecute(r ApiSensibleNftSellV2AddressAddressUtxoGetRequest) ([]SensibleNftSellV2Utxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftSellV2Utxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftSellV2AddressAddressUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/sellV2/address/{address}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.codeHash != nil {
		localVarQueryParams.Add("codeHash", parameterToString(*r.codeHash, ""))
	}
	if r.genesis != nil {
		localVarQueryParams.Add("genesis", parameterToString(*r.genesis, ""))
	}
	if r.flag != nil {
		localVarQueryParams.Add("flag", parameterToString(*r.flag, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}

type ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest struct {
	ctx        _context.Context
	ApiService *SensibleApiService
	codeHash   string
	genesis    string
	tokenIndex *int64
	max        *int64
	min        *int64
}

func (r ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest) TokenIndex(tokenIndex int64) ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest {
	r.tokenIndex = &tokenIndex
	return r
}
func (r ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest) Max(max int64) ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest {
	r.max = &max
	return r
}
func (r ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest) Min(min int64) ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest {
	r.min = &min
	return r
}

func (r ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest) Execute() ([]SensibleNftSellV2Utxo, *_nethttp.Response, GenericOpenAPIError) {
	return r.ApiService.SensibleNftSellV2GenesisCodeHashGenesisUtxoGetExecute(r)
}

/*
 * SensibleNftSellV2GenesisCodeHashGenesisUtxoGet Get all sensible nft token utxos by codeHash and genesisId.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param codeHash Code hash of the token.
 * @param genesis Contract genesis
 * @return ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest
 */
func (a *SensibleApiService) SensibleNftSellV2GenesisCodeHashGenesisUtxoGet(ctx _context.Context, codeHash string, genesis string) ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest {
	return ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest{
		ApiService: a,
		ctx:        ctx,
		codeHash:   codeHash,
		genesis:    genesis,
	}
}

/*
 * Execute executes the request
 * @return []SensibleNftSellV2Utxo
 */
func (a *SensibleApiService) SensibleNftSellV2GenesisCodeHashGenesisUtxoGetExecute(r ApiSensibleNftSellV2GenesisCodeHashGenesisUtxoGetRequest) ([]SensibleNftSellV2Utxo, *_nethttp.Response, GenericOpenAPIError) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		executionError       GenericOpenAPIError
		localVarReturnValue  []SensibleNftSellV2Utxo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SensibleApiService.SensibleNftSellV2GenesisCodeHashGenesisUtxoGet")
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarPath := localBasePath + "/sensible/nft/sellV2/genesis/{codeHash}/{genesis}/utxo"
	localVarPath = strings.Replace(localVarPath, "{"+"codeHash"+"}", _neturl.PathEscape(parameterToString(r.codeHash, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"genesis"+"}", _neturl.PathEscape(parameterToString(r.genesis, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.tokenIndex != nil {
		localVarQueryParams.Add("tokenIndex", parameterToString(*r.tokenIndex, ""))
	}
	if r.max != nil {
		localVarQueryParams.Add("max", parameterToString(*r.max, ""))
	}
	if r.min != nil {
		localVarQueryParams.Add("min", parameterToString(*r.min, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, nil, executionError
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		executionError.error = err.Error()
		return localVarReturnValue, localVarHTTPResponse, executionError
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, executionError
}
